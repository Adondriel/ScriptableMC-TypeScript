import { BukkitTask } from '../../../../org/bukkit/scheduler/BukkitTask.js';
import { Statement } from '../../../../java/sql/Statement.js';
import { PreparedStatement } from '../../../../java/sql/PreparedStatement.js';
import { Connection } from '../../../../java/sql/Connection.js';
export interface MysqlWrapper {
    close(): any;
    openConnection(): void;
    isReadOnly(): boolean;
    openConnectionAsync(callback: any): BukkitTask;
    createStatement(resultSetType: number, resultSetConcurrency: number): Statement;
    createStatement(): Statement;
    createStatement(resultSetType: number, resultSetConcurrency: number, resultSetHoldability: number): Statement;
    prepareStatement(sql: string): PreparedStatement;
    prepareStatement(sql: string, resultSetType: number, resultSetConcurrency: number): PreparedStatement;
    prepareStatement(sql: string, resultSetType: number, resultSetConcurrency: number, resultSetHoldability: number): PreparedStatement;
    prepareStatement(sql: string, columnIndexes: Array<number>): PreparedStatement;
    prepareStatement(sql: string, autoGeneratedKeys: number): PreparedStatement;
    executeAsync(asyncFunction: any): BukkitTask;
    isClosed(): boolean;
    getBaseConnection(): Connection;
}
export declare class MysqlWrapper {
    static get $javaClass(): any;
    constructor(host: string, port: number, database: string, username: string, password: string);
    static openConnectionAsync$default(arg0: MysqlWrapper, arg1: any, arg2: number, arg3: any): BukkitTask;
}
