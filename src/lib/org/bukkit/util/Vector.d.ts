import BlockVector from '../../../org/bukkit/util/BlockVector.js';
import ConfigurationSerializable from '../../../org/bukkit/configuration/serialization/ConfigurationSerializable.js';
import Location from '../../../org/bukkit/Location.js';
import World from '../../../org/bukkit/World.js';
export default interface Vector extends ConfigurationSerializable {
    add(vec: Vector): Vector;
    length(): number;
    clone(): Vector;
    clone(): any;
    dot(other: Vector): number;
    copy(vec: Vector): Vector;
    zero(): Vector;
    normalize(): Vector;
    distance(o: Vector): number;
    divide(vec: Vector): Vector;
    multiply(m: number): Vector;
    multiply(vec: Vector): Vector;
    multiply(m: number): Vector;
    multiply(m: number): Vector;
    isNormalized(): boolean;
    setZ(z: number): Vector;
    setZ(z: number): Vector;
    setZ(z: number): Vector;
    getBlockY(): number;
    setX(x: number): Vector;
    setX(x: number): Vector;
    setX(x: number): Vector;
    subtract(vec: Vector): Vector;
    getBlockX(): number;
    getZ(): number;
    setY(y: number): Vector;
    setY(y: number): Vector;
    setY(y: number): Vector;
    getY(): number;
    getBlockZ(): number;
    getX(): number;
    checkFinite(): void;
    distanceSquared(o: Vector): number;
    lengthSquared(): number;
    serialize(): any;
    rotateAroundNonUnitAxis(axis: Vector, angle: number): Vector;
    isInAABB(min: Vector, max: Vector): boolean;
    getCrossProduct(o: Vector): Vector;
    isInSphere(origin: Vector, radius: number): boolean;
    angle(other: Vector): number;
    toLocation(world: World, yaw: number, pitch: number): Location;
    toLocation(world: World): Location;
    getMidpoint(other: Vector): Vector;
    crossProduct(o: Vector): Vector;
    rotateAroundAxis(axis: Vector, angle: number): Vector;
    midpoint(other: Vector): Vector;
    rotateAroundZ(angle: number): Vector;
    toBlockVector(): BlockVector;
    rotateAroundY(angle: number): Vector;
    rotateAroundX(angle: number): Vector;
}
export default class Vector {
    static get $javaClass(): any;
    constructor(x: number, y: number, z: number);
    constructor(x: number, y: number, z: number);
    constructor();
    constructor(x: number, y: number, z: number);
    static deserialize(args: any): Vector;
    static getEpsilon(): number;
    static getMinimum(v1: Vector, v2: Vector): Vector;
    static getRandom(): Vector;
    static getMaximum(v1: Vector, v2: Vector): Vector;
}
