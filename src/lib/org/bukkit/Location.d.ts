import Block from '../../org/bukkit/block/Block.js';
import Chunk from '../../org/bukkit/Chunk.js';
import ConfigurationSerializable from '../../org/bukkit/configuration/serialization/ConfigurationSerializable.js';
import Vector from '../../org/bukkit/util/Vector.js';
import World from '../../org/bukkit/World.js';
export default interface Location extends ConfigurationSerializable {
    add(vec: Vector): Location;
    add(vec: Location): Location;
    add(x: number, y: number, z: number): Location;
    length(): number;
    clone(): Location;
    clone(): any;
    zero(): Location;
    distance(o: Location): number;
    multiply(m: number): Location;
    getWorld(): World;
    serialize(): any;
    getBlock(): Block;
    setWorld(world: World): void;
    setDirection(vector: Vector): Location;
    distanceSquared(o: Location): number;
    getYaw(): number;
    lengthSquared(): number;
    getBlockZ(): number;
    setX(x: number): void;
    getZ(): number;
    setZ(z: number): void;
    getChunk(): Chunk;
    getBlockX(): number;
    getDirection(): Vector;
    toVector(): Vector;
    getY(): number;
    setPitch(pitch: number): void;
    getPitch(): number;
    checkFinite(): void;
    subtract(x: number, y: number, z: number): Location;
    subtract(vec: Location): Location;
    subtract(vec: Vector): Location;
    setY(y: number): void;
    getX(): number;
    getBlockY(): number;
    setYaw(yaw: number): void;
    isWorldLoaded(): boolean;
}
export default class Location {
    static get $javaClass(): any;
    constructor(world: World, x: number, y: number, z: number);
    constructor(world: World, x: number, y: number, z: number, yaw: number, pitch: number);
    static deserialize(args: any): Location;
    static locToBlock(loc: number): number;
    static normalizeYaw(yaw: number): number;
    static normalizePitch(pitch: number): number;
}
