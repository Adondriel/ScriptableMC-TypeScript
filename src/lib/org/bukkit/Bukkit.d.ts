import Advancement from '../../org/bukkit/advancement/Advancement.js';
import BanList from '../../org/bukkit/BanList.js';
import BanList$Type from '../../org/bukkit/BanList$Type.js';
import BarColor from '../../org/bukkit/boss/BarColor.js';
import BarFlag from '../../org/bukkit/boss/BarFlag.js';
import BarStyle from '../../org/bukkit/boss/BarStyle.js';
import BlockData from '../../org/bukkit/block/data/BlockData.js';
import BossBar from '../../org/bukkit/boss/BossBar.js';
import BukkitScheduler from '../../org/bukkit/scheduler/BukkitScheduler.js';
import CachedServerIcon from '../../org/bukkit/util/CachedServerIcon.js';
import ChunkGenerator$ChunkData from '../../org/bukkit/generator/ChunkGenerator$ChunkData.js';
import CommandSender from '../../org/bukkit/command/CommandSender.js';
import ConsoleCommandSender from '../../org/bukkit/command/ConsoleCommandSender.js';
import Entity from '../../org/bukkit/entity/Entity.js';
import File from '../../java/io/File.js';
import GameMode from '../../org/bukkit/GameMode.js';
import HelpMap from '../../org/bukkit/help/HelpMap.js';
import Inventory from '../../org/bukkit/inventory/Inventory.js';
import InventoryHolder from '../../org/bukkit/inventory/InventoryHolder.js';
import InventoryType from '../../org/bukkit/event/inventory/InventoryType.js';
import ItemFactory from '../../org/bukkit/inventory/ItemFactory.js';
import ItemStack from '../../org/bukkit/inventory/ItemStack.js';
import KeyedBossBar from '../../org/bukkit/boss/KeyedBossBar.js';
import Location from '../../org/bukkit/Location.js';
import LootTable from '../../org/bukkit/loot/LootTable.js';
import MapView from '../../org/bukkit/map/MapView.js';
import Material from '../../org/bukkit/Material.js';
import Merchant from '../../org/bukkit/inventory/Merchant.js';
import Messenger from '../../org/bukkit/plugin/messaging/Messenger.js';
import NamespacedKey from '../../org/bukkit/NamespacedKey.js';
import OfflinePlayer from '../../org/bukkit/OfflinePlayer.js';
import Player from '../../org/bukkit/entity/Player.js';
import PluginCommand from '../../org/bukkit/command/PluginCommand.js';
import PluginManager from '../../org/bukkit/plugin/PluginManager.js';
import Recipe from '../../org/bukkit/inventory/Recipe.js';
import ScoreboardManager from '../../org/bukkit/scoreboard/ScoreboardManager.js';
import Server from '../../org/bukkit/Server.js';
import ServicesManager from '../../org/bukkit/plugin/ServicesManager.js';
import StructureType from '../../org/bukkit/StructureType.js';
import Tag from '../../org/bukkit/Tag.js';
import UnsafeValues from '../../org/bukkit/UnsafeValues.js';
import Warning$WarningState from '../../org/bukkit/Warning$WarningState.js';
import World from '../../org/bukkit/World.js';
import WorldCreator from '../../org/bukkit/WorldCreator.js';
export default interface Bukkit {
}
export default class Bukkit {
    static get $javaClass(): any;
    static shutdown(): void;
    static getName(): string;
    static getUnsafe(): UnsafeValues;
    static getLogger(): any;
    static getPort(): number;
    static getMap(id: number): MapView;
    static createMap(world: World): MapView;
    static getVersion(): string;
    static getServicesManager(): ServicesManager;
    static getServer(): Server;
    static getPluginManager(): PluginManager;
    static getMessenger(): Messenger;
    static getItemFactory(): ItemFactory;
    static getScheduler(): BukkitScheduler;
    static getWorld(_name: string): World;
    static getWorld(uid: string): World;
    static getAllowFlight(): boolean;
    static selectEntities(sender: CommandSender, selector: string): Array<Entity>;
    static getBossBars(): any;
    static getAdvancement(key: NamespacedKey): Advancement;
    static createChunkData(world: World): ChunkGenerator$ChunkData;
    static getTag(registry: string, tag: NamespacedKey, clazz: any): Tag;
    static createBlockData(material: Material, data: string): BlockData;
    static createBlockData(data: string): BlockData;
    static createBlockData(material: Material, consumer: any): BlockData;
    static createBlockData(material: Material): BlockData;
    static getTags(registry: string, clazz: any): any;
    static createBossBar(key: NamespacedKey, title: string, color: BarColor, style: BarStyle, flags: Array<BarFlag>): KeyedBossBar;
    static createBossBar(title: string, color: BarColor, style: BarStyle, flags: Array<BarFlag>): BossBar;
    static getBossBar(key: NamespacedKey): KeyedBossBar;
    static removeBossBar(key: NamespacedKey): boolean;
    static getLootTable(key: NamespacedKey): LootTable;
    static getEntity(uuid: string): Entity;
    static getPlayer(id: string): Player;
    static getPlayer(_name: string): Player;
    static getAllowNether(): boolean;
    static getWorldContainer(): File;
    static getOfflinePlayers(): Array<OfflinePlayer>;
    static getPluginCommand(_name: string): PluginCommand;
    static setWhitelist(value: boolean): void;
    static savePlayers(): void;
    static getSpawnRadius(): number;
    static getOnlinePlayers(): any;
    static reload(): void;
    static getPlayerExact(_name: string): Player;
    static addRecipe(recipe: Recipe): boolean;
    static getOnlineMode(): boolean;
    static createExplorerMap(world: World, location: Location, structureType: StructureType): ItemStack;
    static createExplorerMap(world: World, location: Location, structureType: StructureType, radius: number, findUnexplored: boolean): ItemStack;
    static recipeIterator(): any;
    static getCommandAliases(): any;
    static setSpawnRadius(value: number): void;
    static isHardcore(): boolean;
    static getAllowEnd(): boolean;
    static getBukkitVersion(): string;
    static getOfflinePlayer(id: string): OfflinePlayer;
    static getOfflinePlayer(_name: string): OfflinePlayer;
    static getIPBans(): any;
    static getOperators(): any;
    static setDefaultGameMode(mode: GameMode): void;
    static getUpdateFolder(): string;
    static createInventory(owner: InventoryHolder, size: number): Inventory;
    static createInventory(owner: InventoryHolder, type: InventoryType): Inventory;
    static createInventory(owner: InventoryHolder, type: InventoryType, title: string): Inventory;
    static createInventory(owner: InventoryHolder, size: number, title: string): Inventory;
    static createMerchant(title: string): Merchant;
    static unbanIP(address: string): void;
    static getRecipesFor(result: ItemStack): Array<Recipe>;
    static createWorld(creator: WorldCreator): World;
    static clearRecipes(): void;
    static getBanList(type: BanList$Type): BanList;
    static getHelpMap(): HelpMap;
    static isPrimaryThread(): boolean;
    static getMotd(): string;
    static getShutdownMessage(): string;
    static getServerIcon(): CachedServerIcon;
    static getIdleTimeout(): number;
    static banIP(address: string): void;
    static broadcastMessage(message: string): number;
    static reloadWhitelist(): void;
    static getIp(): string;
    static dispatchCommand(sender: CommandSender, commandLine: string): boolean;
    static resetRecipes(): void;
    static getViewDistance(): number;
    static removeRecipe(key: NamespacedKey): boolean;
    static getDefaultGameMode(): GameMode;
    static getWorlds(): Array<World>;
    static broadcast(message: string, permission: string): number;
    static getWorldType(): string;
    static matchPlayer(_name: string): Array<Player>;
    static getConsoleSender(): ConsoleCommandSender;
    static loadServerIcon(file: File): CachedServerIcon;
    static loadServerIcon(image: any): CachedServerIcon;
    static setIdleTimeout(threshold: number): void;
    static getMaxPlayers(): number;
    static unloadWorld(world: World, save: boolean): boolean;
    static unloadWorld(_name: string, save: boolean): boolean;
    static getWarningState(): Warning$WarningState;
    static hasWhitelist(): boolean;
    static reloadData(): void;
    static getBannedPlayers(): any;
    static getTicksPerAnimalSpawns(): number;
    static getGenerateStructures(): boolean;
    static getWhitelistedPlayers(): any;
    static getScoreboardManager(): ScoreboardManager;
    static getConnectionThrottle(): number;
    static advancementIterator(): any;
    static getUpdateFolderFile(): File;
    static getTicksPerMonsterSpawns(): number;
    static getWaterAnimalSpawnLimit(): number;
    static getAmbientSpawnLimit(): number;
    static getAnimalSpawnLimit(): number;
    static getMonsterSpawnLimit(): number;
    static setServer(server: Server): void;
}
