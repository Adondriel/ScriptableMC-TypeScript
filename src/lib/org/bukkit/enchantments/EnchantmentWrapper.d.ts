import Enchantment from '../../../org/bukkit/enchantments/Enchantment.js';
import EnchantmentTarget from '../../../org/bukkit/enchantments/EnchantmentTarget.js';
import ItemStack from '../../../org/bukkit/inventory/ItemStack.js';
import NamespacedKey from '../../../org/bukkit/NamespacedKey.js';
export default interface EnchantmentWrapper extends Enchantment {
    getName(): string;
    getMaxLevel(): number;
    canEnchantItem(item: ItemStack): boolean;
    getStartLevel(): number;
    conflictsWith(other: Enchantment): boolean;
    isTreasure(): boolean;
    isCursed(): boolean;
    getItemTarget(): EnchantmentTarget;
    getEnchantment(): Enchantment;
    getKey(): NamespacedKey;
}
export default class EnchantmentWrapper {
    static get $javaClass(): any;
    constructor(_name: string);
    static get PROTECTION_ENVIRONMENTAL(): Enchantment;
    static get PROTECTION_FIRE(): Enchantment;
    static get PROTECTION_FALL(): Enchantment;
    static get PROTECTION_EXPLOSIONS(): Enchantment;
    static get PROTECTION_PROJECTILE(): Enchantment;
    static get OXYGEN(): Enchantment;
    static get WATER_WORKER(): Enchantment;
    static get THORNS(): Enchantment;
    static get DEPTH_STRIDER(): Enchantment;
    static get FROST_WALKER(): Enchantment;
    static get BINDING_CURSE(): Enchantment;
    static get DAMAGE_ALL(): Enchantment;
    static get DAMAGE_UNDEAD(): Enchantment;
    static get DAMAGE_ARTHROPODS(): Enchantment;
    static get KNOCKBACK(): Enchantment;
    static get FIRE_ASPECT(): Enchantment;
    static get LOOT_BONUS_MOBS(): Enchantment;
    static get SWEEPING_EDGE(): Enchantment;
    static get DIG_SPEED(): Enchantment;
    static get SILK_TOUCH(): Enchantment;
    static get DURABILITY(): Enchantment;
    static get LOOT_BONUS_BLOCKS(): Enchantment;
    static get ARROW_DAMAGE(): Enchantment;
    static get ARROW_KNOCKBACK(): Enchantment;
    static get ARROW_FIRE(): Enchantment;
    static get ARROW_INFINITE(): Enchantment;
    static get LUCK(): Enchantment;
    static get LURE(): Enchantment;
    static get LOYALTY(): Enchantment;
    static get IMPALING(): Enchantment;
    static get RIPTIDE(): Enchantment;
    static get CHANNELING(): Enchantment;
    static get MULTISHOT(): Enchantment;
    static get QUICK_CHARGE(): Enchantment;
    static get PIERCING(): Enchantment;
    static get MENDING(): Enchantment;
    static get VANISHING_CURSE(): Enchantment;
    static values(): Array<Enchantment>;
    static getByName(_name: string): Enchantment;
    static registerEnchantment(enchantment: Enchantment): void;
    static isAcceptingRegistrations(): boolean;
    static stopAcceptingRegistrations(): void;
    static getByKey(key: NamespacedKey): Enchantment;
}
