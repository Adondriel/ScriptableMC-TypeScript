import { UnsafeValues } from '../../org/bukkit/UnsafeValues.js';
import { MapView } from '../../org/bukkit/map/MapView.js';
import { World } from '../../org/bukkit/World.js';
import { Messenger } from '../../org/bukkit/plugin/messaging/Messenger.js';
import { PluginManager } from '../../org/bukkit/plugin/PluginManager.js';
import { ConsoleCommandSender } from '../../org/bukkit/command/ConsoleCommandSender.js';
import { ScoreboardManager } from '../../org/bukkit/scoreboard/ScoreboardManager.js';
import { BukkitScheduler } from '../../org/bukkit/scheduler/BukkitScheduler.js';
import { Player } from '../../org/bukkit/entity/Player.js';
import { ItemFactory } from '../../org/bukkit/inventory/ItemFactory.js';
import { OfflinePlayer } from '../../org/bukkit/OfflinePlayer.js';
import { HelpMap } from '../../org/bukkit/help/HelpMap.js';
import { Inventory } from '../../org/bukkit/inventory/Inventory.js';
import { InventoryHolder } from '../../org/bukkit/inventory/InventoryHolder.js';
import { InventoryType } from '../../org/bukkit/event/inventory/InventoryType.js';
import { BanList } from '../../org/bukkit/BanList.js';
import { BanList$Type } from '../../org/bukkit/BanList$Type.js';
import { GameMode } from '../../org/bukkit/GameMode.js';
import { Recipe } from '../../org/bukkit/inventory/Recipe.js';
import { WorldCreator } from '../../org/bukkit/WorldCreator.js';
import { CommandSender } from '../../org/bukkit/command/CommandSender.js';
import { ItemStack } from '../../org/bukkit/inventory/ItemStack.js';
import { Location } from '../../org/bukkit/Location.js';
import { StructureType } from '../../org/bukkit/StructureType.js';
import { ServicesManager } from '../../org/bukkit/plugin/ServicesManager.js';
import { PluginCommand } from '../../org/bukkit/command/PluginCommand.js';
import { ChunkGenerator$ChunkData } from '../../org/bukkit/generator/ChunkGenerator$ChunkData.js';
import { Merchant } from '../../org/bukkit/inventory/Merchant.js';
import { CachedServerIcon } from '../../org/bukkit/util/CachedServerIcon.js';
import { Tag } from '../../org/bukkit/Tag.js';
import { NamespacedKey } from '../../org/bukkit/NamespacedKey.js';
import { Warning$WarningState } from '../../org/bukkit/Warning$WarningState.js';
import { KeyedBossBar } from '../../org/bukkit/boss/KeyedBossBar.js';
import { BarColor } from '../../org/bukkit/boss/BarColor.js';
import { BarStyle } from '../../org/bukkit/boss/BarStyle.js';
import { BarFlag } from '../../org/bukkit/boss/BarFlag.js';
import { BossBar } from '../../org/bukkit/boss/BossBar.js';
import { LootTable } from '../../org/bukkit/loot/LootTable.js';
import { BlockData } from '../../org/bukkit/block/data/BlockData.js';
import { Material } from '../../org/bukkit/Material.js';
import { Entity } from '../../org/bukkit/entity/Entity.js';
import { Advancement } from '../../org/bukkit/advancement/Advancement.js';
import { Plugin } from '../../org/bukkit/plugin/Plugin.js';
import { PluginMessageRecipient } from '../../org/bukkit/plugin/messaging/PluginMessageRecipient.js';
export interface Server extends PluginMessageRecipient {
    shutdown(): void;
    getName(): string;
    getUnsafe(): UnsafeValues;
    getLogger(): any;
    getPort(): number;
    getMap(arg0: number): MapView;
    createMap(arg0: World): MapView;
    getVersion(): string;
    getMessenger(): Messenger;
    getPluginManager(): PluginManager;
    getOnlinePlayers(): any;
    getWorld(arg0: string): World;
    getWorld(arg0: string): World;
    getConsoleSender(): ConsoleCommandSender;
    getAllowFlight(): boolean;
    getMonsterSpawnLimit(): number;
    getTicksPerMonsterSpawns(): number;
    getWaterAnimalSpawnLimit(): number;
    getGenerateStructures(): boolean;
    getWhitelistedPlayers(): any;
    getConnectionThrottle(): number;
    getScoreboardManager(): ScoreboardManager;
    getAnimalSpawnLimit(): number;
    getAmbientSpawnLimit(): number;
    getUpdateFolderFile(): any;
    getTicksPerAnimalSpawns(): number;
    advancementIterator(): any;
    getScheduler(): BukkitScheduler;
    getPlayer(arg0: string): Player;
    getPlayer(arg0: string): Player;
    getItemFactory(): ItemFactory;
    unbanIP(arg0: string): void;
    getOperators(): any;
    getWorldContainer(): any;
    getOfflinePlayers(): Array<OfflinePlayer>;
    getHelpMap(): HelpMap;
    reloadWhitelist(): void;
    savePlayers(): void;
    getPlayerExact(arg0: string): Player;
    createInventory(arg0: InventoryHolder, arg1: InventoryType, arg2: string): Inventory;
    createInventory(arg0: InventoryHolder, arg1: number): Inventory;
    createInventory(arg0: InventoryHolder, arg1: number, arg2: string): Inventory;
    createInventory(arg0: InventoryHolder, arg1: InventoryType): Inventory;
    getBukkitVersion(): string;
    getAllowEnd(): boolean;
    recipeIterator(): any;
    reload(): void;
    getOnlineMode(): boolean;
    broadcast(arg0: string, arg1: string): number;
    getIPBans(): any;
    getBanList(arg0: BanList$Type): BanList;
    getIp(): string;
    setSpawnRadius(arg0: number): void;
    setWhitelist(arg0: boolean): void;
    getDefaultGameMode(): GameMode;
    clearRecipes(): void;
    getWorldType(): string;
    getWorlds(): any;
    addRecipe(arg0: Recipe): boolean;
    getViewDistance(): number;
    getSpawnRadius(): number;
    hasWhitelist(): boolean;
    broadcastMessage(arg0: string): number;
    createWorld(arg0: WorldCreator): World;
    resetRecipes(): void;
    dispatchCommand(arg0: CommandSender, arg1: string): boolean;
    matchPlayer(arg0: string): any;
    getOfflinePlayer(arg0: string): OfflinePlayer;
    getOfflinePlayer(arg0: string): OfflinePlayer;
    getCommandAliases(): any;
    createExplorerMap(arg0: World, arg1: Location, arg2: StructureType, arg3: number, arg4: boolean): ItemStack;
    createExplorerMap(arg0: World, arg1: Location, arg2: StructureType): ItemStack;
    getUpdateFolder(): string;
    getBannedPlayers(): any;
    setDefaultGameMode(arg0: GameMode): void;
    getMaxPlayers(): number;
    getServicesManager(): ServicesManager;
    getAllowNether(): boolean;
    unloadWorld(arg0: World, arg1: boolean): boolean;
    unloadWorld(arg0: string, arg1: boolean): boolean;
    reloadData(): void;
    getRecipesFor(arg0: ItemStack): any;
    isHardcore(): boolean;
    banIP(arg0: string): void;
    getPluginCommand(arg0: string): PluginCommand;
    createChunkData(arg0: World): ChunkGenerator$ChunkData;
    createMerchant(arg0: string): Merchant;
    loadServerIcon(arg0: any): CachedServerIcon;
    loadServerIcon(arg0: any): CachedServerIcon;
    getTag(arg0: string, arg1: NamespacedKey, arg2: any): Tag;
    getServerIcon(): CachedServerIcon;
    removeBossBar(arg0: NamespacedKey): boolean;
    setIdleTimeout(arg0: number): void;
    getWarningState(): Warning$WarningState;
    getIdleTimeout(): number;
    createBossBar(arg0: NamespacedKey, arg1: string, arg2: BarColor, arg3: BarStyle, arg4: Array<BarFlag>): KeyedBossBar;
    createBossBar(arg0: string, arg1: BarColor, arg2: BarStyle, arg3: Array<BarFlag>): BossBar;
    getShutdownMessage(): string;
    getLootTable(arg0: NamespacedKey): LootTable;
    getMotd(): string;
    isPrimaryThread(): boolean;
    createBlockData(arg0: Material, arg1: string): BlockData;
    createBlockData(arg0: string): BlockData;
    createBlockData(arg0: Material, arg1: any): BlockData;
    createBlockData(arg0: Material): BlockData;
    getBossBars(): any;
    getBossBar(arg0: NamespacedKey): KeyedBossBar;
    getEntity(arg0: string): Entity;
    getTags(arg0: string, arg1: any): any;
    selectEntities(arg0: CommandSender, arg1: string): any;
    getAdvancement(arg0: NamespacedKey): Advancement;
    getListeningPluginChannels(): any;
    sendPluginMessage(arg0: Plugin, arg1: string, arg2: Array<number>): void;
}
export declare class Server {
    static get $javaClass(): any;
    static get BROADCAST_CHANNEL_ADMINISTRATIVE(): string;
    static get BROADCAST_CHANNEL_USERS(): string;
}
