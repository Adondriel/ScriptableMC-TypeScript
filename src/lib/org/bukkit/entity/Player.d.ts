import Advancement from '../../../org/bukkit/advancement/Advancement.js';
import AdvancementProgress from '../../../org/bukkit/advancement/AdvancementProgress.js';
import Attribute from '../../../org/bukkit/attribute/Attribute.js';
import AttributeInstance from '../../../org/bukkit/attribute/AttributeInstance.js';
import Block from '../../../org/bukkit/block/Block.js';
import BlockData from '../../../org/bukkit/block/data/BlockData.js';
import BlockFace from '../../../org/bukkit/block/BlockFace.js';
import BoundingBox from '../../../org/bukkit/util/BoundingBox.js';
import Conversable from '../../../org/bukkit/conversations/Conversable.js';
import Conversation from '../../../org/bukkit/conversations/Conversation.js';
import ConversationAbandonedEvent from '../../../org/bukkit/conversations/ConversationAbandonedEvent.js';
import DyeColor from '../../../org/bukkit/DyeColor.js';
import Effect from '../../../org/bukkit/Effect.js';
import Entity from '../../../org/bukkit/entity/Entity.js';
import EntityDamageEvent from '../../../org/bukkit/event/entity/EntityDamageEvent.js';
import EntityEffect from '../../../org/bukkit/EntityEffect.js';
import EntityEquipment from '../../../org/bukkit/inventory/EntityEquipment.js';
import EntityType from '../../../org/bukkit/entity/EntityType.js';
import FluidCollisionMode from '../../../org/bukkit/FluidCollisionMode.js';
import GameMode from '../../../org/bukkit/GameMode.js';
import HumanEntity from '../../../org/bukkit/entity/HumanEntity.js';
import Instrument from '../../../org/bukkit/Instrument.js';
import Inventory from '../../../org/bukkit/inventory/Inventory.js';
import InventoryView from '../../../org/bukkit/inventory/InventoryView.js';
import InventoryView$Property from '../../../org/bukkit/inventory/InventoryView$Property.js';
import ItemStack from '../../../org/bukkit/inventory/ItemStack.js';
import Location from '../../../org/bukkit/Location.js';
import MainHand from '../../../org/bukkit/inventory/MainHand.js';
import MapView from '../../../org/bukkit/map/MapView.js';
import Material from '../../../org/bukkit/Material.js';
import MemoryKey from '../../../org/bukkit/entity/memory/MemoryKey.js';
import Merchant from '../../../org/bukkit/inventory/Merchant.js';
import MetadataValue from '../../../org/bukkit/metadata/MetadataValue.js';
import NamespacedKey from '../../../org/bukkit/NamespacedKey.js';
import Note from '../../../org/bukkit/Note.js';
import OfflinePlayer from '../../../org/bukkit/OfflinePlayer.js';
import Particle from '../../../org/bukkit/Particle.js';
import Permission from '../../../org/bukkit/permissions/Permission.js';
import PermissionAttachment from '../../../org/bukkit/permissions/PermissionAttachment.js';
import PersistentDataContainer from '../../../org/bukkit/persistence/PersistentDataContainer.js';
import PistonMoveReaction from '../../../org/bukkit/block/PistonMoveReaction.js';
import PlayerInventory from '../../../org/bukkit/inventory/PlayerInventory.js';
import PlayerTeleportEvent$TeleportCause from '../../../org/bukkit/event/player/PlayerTeleportEvent$TeleportCause.js';
import Plugin from '../../../org/bukkit/plugin/Plugin.js';
import PluginMessageRecipient from '../../../org/bukkit/plugin/messaging/PluginMessageRecipient.js';
import Pose from '../../../org/bukkit/entity/Pose.js';
import PotionEffect from '../../../org/bukkit/potion/PotionEffect.js';
import PotionEffectType from '../../../org/bukkit/potion/PotionEffectType.js';
import Projectile from '../../../org/bukkit/entity/Projectile.js';
import RayTraceResult from '../../../org/bukkit/util/RayTraceResult.js';
import Scoreboard from '../../../org/bukkit/scoreboard/Scoreboard.js';
import Server from '../../../org/bukkit/Server.js';
import Sound from '../../../org/bukkit/Sound.js';
import SoundCategory from '../../../org/bukkit/SoundCategory.js';
import Statistic from '../../../org/bukkit/Statistic.js';
import Vector from '../../../org/bukkit/util/Vector.js';
import Villager from '../../../org/bukkit/entity/Villager.js';
import WeatherType from '../../../org/bukkit/WeatherType.js';
import World from '../../../org/bukkit/World.js';
export default interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient {
    getAddress(): any;
    getDisplayName(): string;
    getAllowFlight(): boolean;
    setPlayerListHeader(arg0: string): void;
    getClientViewDistance(): number;
    getPlayerTimeOffset(): number;
    getPlayerListHeader(): string;
    isPlayerTimeRelative(): boolean;
    getPlayerListFooter(): string;
    sendExperienceChange(arg0: number, arg1: number): void;
    sendExperienceChange(arg0: number): void;
    getAdvancementProgress(arg0: Advancement): AdvancementProgress;
    setPlayerListHeaderFooter(arg0: string, arg1: string): void;
    setPlayerListFooter(arg0: string): void;
    hidePlayer(arg0: Plugin, arg1: Player): void;
    hidePlayer(arg0: Player): void;
    setScoreboard(arg0: Scoreboard): void;
    setTexturePack(arg0: string): void;
    spawnParticle(arg0: Particle, arg1: number, arg2: number, arg3: number, arg4: number, arg5: any): void;
    spawnParticle(arg0: Particle, arg1: Location, arg2: number, arg3: any): void;
    spawnParticle(arg0: Particle, arg1: number, arg2: number, arg3: number, arg4: number): void;
    spawnParticle(arg0: Particle, arg1: Location, arg2: number): void;
    spawnParticle(arg0: Particle, arg1: Location, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
    spawnParticle(arg0: Particle, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
    spawnParticle(arg0: Particle, arg1: Location, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: any): void;
    spawnParticle(arg0: Particle, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: any): void;
    spawnParticle(arg0: Particle, arg1: Location, arg2: number, arg3: number, arg4: number, arg5: number): void;
    spawnParticle(arg0: Particle, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
    spawnParticle(arg0: Particle, arg1: Location, arg2: number, arg3: number, arg4: number, arg5: number, arg6: any): void;
    spawnParticle(arg0: Particle, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: any): void;
    getHealthScale(): number;
    setHealthScaled(arg0: boolean): void;
    getSpectatorTarget(): Entity;
    getScoreboard(): Scoreboard;
    isFlying(): boolean;
    getFoodLevel(): number;
    getWalkSpeed(): number;
    getExhaustion(): number;
    setAllowFlight(arg0: boolean): void;
    sendTitle(arg0: string, arg1: string, arg2: number, arg3: number, arg4: number): void;
    sendTitle(arg0: string, arg1: string): void;
    setSpectatorTarget(arg0: Entity): void;
    setWalkSpeed(arg0: number): void;
    resetTitle(): void;
    openBook(arg0: ItemStack): void;
    setSaturation(arg0: number): void;
    setFlySpeed(arg0: number): void;
    setFlying(arg0: boolean): void;
    isHealthScaled(): boolean;
    updateCommands(): void;
    setExhaustion(arg0: number): void;
    setFoodLevel(arg0: number): void;
    getSaturation(): number;
    showPlayer(arg0: Plugin, arg1: Player): void;
    showPlayer(arg0: Player): void;
    getFlySpeed(): number;
    getLocale(): string;
    canSee(arg0: Player): boolean;
    setResourcePack(arg0: string, arg1: Array<number>): void;
    setResourcePack(arg0: string): void;
    setHealthScale(arg0: number): void;
    playEffect(arg0: Location, arg1: Effect, arg2: number): void;
    playEffect(arg0: Location, arg1: Effect, arg2: any): void;
    kickPlayer(arg0: string): void;
    sendBlockChange(arg0: Location, arg1: BlockData): void;
    sendBlockChange(arg0: Location, arg1: Material, arg2: number): void;
    getPlayerTime(): number;
    setExp(arg0: number): void;
    getTotalExperience(): number;
    setDisplayName(arg0: string): void;
    stopSound(arg0: string): void;
    stopSound(arg0: Sound): void;
    stopSound(arg0: Sound, arg1: SoundCategory): void;
    stopSound(arg0: string, arg1: SoundCategory): void;
    resetPlayerTime(): void;
    resetPlayerWeather(): void;
    sendChunkChange(arg0: Location, arg1: number, arg2: number, arg3: number, arg4: Array<number>): boolean;
    setLevel(arg0: number): void;
    setTotalExperience(arg0: number): void;
    decrementStatistic(arg0: Statistic, arg1: EntityType, arg2: number): void;
    decrementStatistic(arg0: Statistic, arg1: number): void;
    decrementStatistic(arg0: Statistic, arg1: EntityType): void;
    decrementStatistic(arg0: Statistic): void;
    decrementStatistic(arg0: Statistic, arg1: Material): void;
    decrementStatistic(arg0: Statistic, arg1: Material, arg2: number): void;
    setPlayerListName(arg0: string): void;
    setCompassTarget(arg0: Location): void;
    performCommand(arg0: string): boolean;
    saveData(): void;
    isSleepingIgnored(): boolean;
    sendRawMessage(arg0: string): void;
    setSprinting(arg0: boolean): void;
    playNote(arg0: Location, arg1: Instrument, arg2: Note): void;
    playNote(arg0: Location, arg1: number, arg2: number): void;
    sendSignChange(arg0: Location, arg1: Array<string>): void;
    sendSignChange(arg0: Location, arg1: Array<string>, arg2: DyeColor): void;
    setPlayerTime(arg0: number, arg1: boolean): void;
    loadData(): void;
    updateInventory(): void;
    setPlayerWeather(arg0: WeatherType): void;
    giveExp(arg0: number): void;
    isSprinting(): boolean;
    getPlayerListName(): string;
    getStatistic(arg0: Statistic, arg1: Material): number;
    getStatistic(arg0: Statistic, arg1: EntityType): number;
    getStatistic(arg0: Statistic): number;
    getCompassTarget(): Location;
    setSneaking(arg0: boolean): void;
    chat(arg0: string): void;
    setSleepingIgnored(arg0: boolean): void;
    playSound(arg0: Location, arg1: string, arg2: SoundCategory, arg3: number, arg4: number): void;
    playSound(arg0: Location, arg1: Sound, arg2: number, arg3: number): void;
    playSound(arg0: Location, arg1: string, arg2: number, arg3: number): void;
    playSound(arg0: Location, arg1: Sound, arg2: SoundCategory, arg3: number, arg4: number): void;
    incrementStatistic(arg0: Statistic): void;
    incrementStatistic(arg0: Statistic, arg1: EntityType): void;
    incrementStatistic(arg0: Statistic, arg1: Material, arg2: number): void;
    incrementStatistic(arg0: Statistic, arg1: number): void;
    incrementStatistic(arg0: Statistic, arg1: Material): void;
    incrementStatistic(arg0: Statistic, arg1: EntityType, arg2: number): void;
    sendMap(arg0: MapView): void;
    setStatistic(arg0: Statistic, arg1: EntityType, arg2: number): void;
    setStatistic(arg0: Statistic, arg1: number): void;
    setStatistic(arg0: Statistic, arg1: Material, arg2: number): void;
    giveExpLevels(arg0: number): void;
    getExp(): number;
    getLevel(): number;
    getPlayerWeather(): WeatherType;
    isSneaking(): boolean;
    getName(): string;
    getName(): string;
    sleep(arg0: Location, arg1: boolean): boolean;
    closeInventory(): void;
    getInventory(): Inventory;
    getInventory(): PlayerInventory;
    getOpenInventory(): InventoryView;
    getShoulderEntityLeft(): Entity;
    setShoulderEntityLeft(arg0: Entity): void;
    getShoulderEntityRight(): Entity;
    setShoulderEntityRight(arg0: Entity): void;
    getBedSpawnLocation(): Location;
    getBedSpawnLocation(): Location;
    setBedSpawnLocation(arg0: Location, arg1: boolean): void;
    setBedSpawnLocation(arg0: Location): void;
    wakeup(arg0: boolean): void;
    isHandRaised(): boolean;
    discoverRecipe(arg0: NamespacedKey): boolean;
    discoverRecipes(arg0: any): number;
    undiscoverRecipe(arg0: NamespacedKey): boolean;
    getSleepTicks(): number;
    getExpToLevel(): number;
    setItemInHand(arg0: ItemStack): void;
    undiscoverRecipes(arg0: any): number;
    getBedLocation(): Location;
    openMerchant(arg0: Villager, arg1: boolean): InventoryView;
    openMerchant(arg0: Merchant, arg1: boolean): InventoryView;
    getItemInHand(): ItemStack;
    getItemOnCursor(): ItemStack;
    getEnderChest(): Inventory;
    setItemOnCursor(arg0: ItemStack): void;
    openInventory(arg0: Inventory): InventoryView;
    openInventory(arg0: InventoryView): void;
    getMainHand(): MainHand;
    setWindowProperty(arg0: InventoryView$Property, arg1: number): boolean;
    setCooldown(arg0: Material, arg1: number): void;
    openEnchanting(arg0: Location, arg1: boolean): InventoryView;
    hasCooldown(arg0: Material): boolean;
    getGameMode(): GameMode;
    setGameMode(arg0: GameMode): void;
    getCooldown(arg0: Material): number;
    isBlocking(): boolean;
    openWorkbench(arg0: Location, arg1: boolean): InventoryView;
    setMemory(arg0: MemoryKey, arg1: any): void;
    getLastTwoTargetBlocks(arg0: any, arg1: number): any;
    setMaximumNoDamageTicks(arg0: number): void;
    getActivePotionEffects(): any;
    getTargetBlockExact(arg0: number, arg1: FluidCollisionMode): Block;
    getTargetBlockExact(arg0: number): Block;
    setRemoveWhenFarAway(arg0: boolean): void;
    getRemoveWhenFarAway(): boolean;
    getMaximumNoDamageTicks(): number;
    setLeashHolder(arg0: Entity): boolean;
    getMaximumAir(): number;
    setCanPickupItems(arg0: boolean): void;
    getTargetBlock(arg0: any, arg1: number): Block;
    getEquipment(): EntityEquipment;
    setCollidable(arg0: boolean): void;
    addPotionEffect(arg0: PotionEffect): boolean;
    addPotionEffect(arg0: PotionEffect, arg1: boolean): boolean;
    hasAI(): boolean;
    isCollidable(): boolean;
    isSwimming(): boolean;
    getLeashHolder(): Entity;
    getLineOfSight(arg0: any, arg1: number): any;
    setRemainingAir(arg0: number): void;
    isGliding(): boolean;
    getCanPickupItems(): boolean;
    getPotionEffect(arg0: PotionEffectType): PotionEffect;
    isLeashed(): boolean;
    setMaximumAir(arg0: number): void;
    isSleeping(): boolean;
    removePotionEffect(arg0: PotionEffectType): void;
    getLastDamage(): number;
    hasLineOfSight(arg0: Entity): boolean;
    rayTraceBlocks(arg0: number): RayTraceResult;
    rayTraceBlocks(arg0: number, arg1: FluidCollisionMode): RayTraceResult;
    setLastDamage(arg0: number): void;
    hasPotionEffect(arg0: PotionEffectType): boolean;
    setAI(arg0: boolean): void;
    getEyeLocation(): Location;
    setNoDamageTicks(arg0: number): void;
    getKiller(): Player;
    addPotionEffects(arg0: any): boolean;
    getNoDamageTicks(): number;
    getEyeHeight(): number;
    getEyeHeight(arg0: boolean): number;
    setGliding(arg0: boolean): void;
    getRemainingAir(): number;
    setSwimming(arg0: boolean): void;
    isRiptiding(): boolean;
    getMemory(arg0: MemoryKey): any;
    getAttribute(arg0: Attribute): AttributeInstance;
    getAbsorptionAmount(): number;
    setAbsorptionAmount(arg0: number): void;
    damage(arg0: number): void;
    damage(arg0: number, arg1: Entity): void;
    resetMaxHealth(): void;
    setHealth(arg0: number): void;
    getHealth(): number;
    getMaxHealth(): number;
    setMaxHealth(arg0: number): void;
    remove(): void;
    isEmpty(): boolean;
    getLocation(): Location;
    getLocation(arg0: Location): Location;
    getType(): EntityType;
    getServer(): Server;
    getWorld(): World;
    playEffect(arg0: EntityEffect): void;
    isValid(): boolean;
    getWidth(): number;
    getBoundingBox(): BoundingBox;
    isOnGround(): boolean;
    teleport(arg0: Entity, arg1: PlayerTeleportEvent$TeleportCause): boolean;
    teleport(arg0: Location): boolean;
    teleport(arg0: Entity): boolean;
    teleport(arg0: Location, arg1: PlayerTeleportEvent$TeleportCause): boolean;
    setRotation(arg0: number, arg1: number): void;
    getNearbyEntities(arg0: number, arg1: number, arg2: number): any;
    getEntityId(): number;
    setVelocity(arg0: Vector): void;
    getVelocity(): Vector;
    getHeight(): number;
    getPassenger(): Entity;
    setLastDamageCause(arg0: EntityDamageEvent): void;
    leaveVehicle(): boolean;
    getMaxFireTicks(): number;
    addPassenger(arg0: Entity): boolean;
    getVehicle(): Entity;
    getTicksLived(): number;
    getFallDistance(): number;
    eject(): boolean;
    setGravity(arg0: boolean): void;
    isDead(): boolean;
    setPortalCooldown(arg0: number): void;
    getLastDamageCause(): EntityDamageEvent;
    isPersistent(): boolean;
    setInvulnerable(arg0: boolean): void;
    getUniqueId(): string;
    getUniqueId(): string;
    setFallDistance(arg0: number): void;
    setGlowing(arg0: boolean): void;
    setPersistent(arg0: boolean): void;
    getFacing(): BlockFace;
    getPose(): Pose;
    isSilent(): boolean;
    getFireTicks(): number;
    isInsideVehicle(): boolean;
    isGlowing(): boolean;
    hasGravity(): boolean;
    getPortalCooldown(): number;
    setFireTicks(arg0: number): void;
    getScoreboardTags(): any;
    getPassengers(): any;
    removePassenger(arg0: Entity): boolean;
    isInvulnerable(): boolean;
    setTicksLived(arg0: number): void;
    setPassenger(arg0: Entity): boolean;
    setSilent(arg0: boolean): void;
    addScoreboardTag(arg0: string): boolean;
    getPistonMoveReaction(): PistonMoveReaction;
    isCustomNameVisible(): boolean;
    setCustomNameVisible(arg0: boolean): void;
    removeScoreboardTag(arg0: string): boolean;
    removeMetadata(arg0: string, arg1: Plugin): void;
    hasMetadata(arg0: string): boolean;
    setMetadata(arg0: string, arg1: MetadataValue): void;
    getMetadata(arg0: string): any;
    sendMessage(arg0: Array<string>): void;
    sendMessage(arg0: string): void;
    hasPermission(arg0: string): boolean;
    hasPermission(arg0: Permission): boolean;
    addAttachment(arg0: Plugin, arg1: string, arg2: boolean, arg3: number): PermissionAttachment;
    addAttachment(arg0: Plugin, arg1: string, arg2: boolean): PermissionAttachment;
    addAttachment(arg0: Plugin): PermissionAttachment;
    addAttachment(arg0: Plugin, arg1: number): PermissionAttachment;
    isPermissionSet(arg0: string): boolean;
    isPermissionSet(arg0: Permission): boolean;
    removeAttachment(arg0: PermissionAttachment): void;
    recalculatePermissions(): void;
    getEffectivePermissions(): any;
    isOp(): boolean;
    setOp(arg0: boolean): void;
    getCustomName(): string;
    setCustomName(arg0: string): void;
    getPersistentDataContainer(): PersistentDataContainer;
    launchProjectile(arg0: any): Projectile;
    launchProjectile(arg0: any, arg1: Vector): Projectile;
    isConversing(): boolean;
    beginConversation(arg0: Conversation): boolean;
    abandonConversation(arg0: Conversation): void;
    abandonConversation(arg0: Conversation, arg1: ConversationAbandonedEvent): void;
    acceptConversationInput(arg0: string): void;
    getPlayer(): Player;
    isOnline(): boolean;
    getFirstPlayed(): number;
    isWhitelisted(): boolean;
    isBanned(): boolean;
    getLastPlayed(): number;
    setWhitelisted(arg0: boolean): void;
    hasPlayedBefore(): boolean;
    serialize(): any;
    getListeningPluginChannels(): any;
    sendPluginMessage(arg0: Plugin, arg1: string, arg2: Array<number>): void;
}
export default class Player {
    static get $javaClass(): any;
}
