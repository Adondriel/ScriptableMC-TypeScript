import FileFilter from '../../java/io/FileFilter.js';
import FilenameFilter from '../../java/io/FilenameFilter.js';
export default interface File {
    length(): number;
    compareTo(pathname: File): number;
    compareTo(arg0: any): number;
    getName(): string;
    list(filter: FilenameFilter): Array<string>;
    list(): Array<string>;
    getParent(): string;
    isAbsolute(): boolean;
    delete(): boolean;
    setReadOnly(): boolean;
    canRead(): boolean;
    getPath(): string;
    toURI(): any;
    toURL(): any;
    getParentFile(): File;
    getAbsolutePath(): string;
    getAbsoluteFile(): File;
    getCanonicalPath(): string;
    getCanonicalFile(): File;
    isDirectory(): boolean;
    canWrite(): boolean;
    exists(): boolean;
    isFile(): boolean;
    isHidden(): boolean;
    lastModified(): number;
    createNewFile(): boolean;
    deleteOnExit(): void;
    listFiles(filter: FileFilter): Array<File>;
    listFiles(filter: FilenameFilter): Array<File>;
    listFiles(): Array<File>;
    mkdir(): boolean;
    mkdirs(): boolean;
    renameTo(dest: File): boolean;
    setLastModified(time: number): boolean;
    setWritable(writable: boolean): boolean;
    setWritable(writable: boolean, ownerOnly: boolean): boolean;
    setReadable(readable: boolean, ownerOnly: boolean): boolean;
    setReadable(readable: boolean): boolean;
    setExecutable(executable: boolean): boolean;
    setExecutable(executable: boolean, ownerOnly: boolean): boolean;
    canExecute(): boolean;
    getTotalSpace(): number;
    getFreeSpace(): number;
    getUsableSpace(): number;
    toPath(): any;
}
export default class File {
    static get $javaClass(): any;
    constructor(parent: string, child: string);
    constructor(parent: File, child: string);
    constructor(uri: any);
    constructor(pathname: string);
    static get separatorChar(): string;
    static get separator(): string;
    static get pathSeparatorChar(): string;
    static get pathSeparator(): string;
    static listRoots(): Array<File>;
    static createTempFile(prefix: string, suffix: string): File;
    static createTempFile(prefix: string, suffix: string, directory: File): File;
}
