import Blob from '../../java/sql/Blob.js';
import Clob from '../../java/sql/Clob.js';
import Date from '../../java/sql/Date.js';
import InputStream from '../../java/io/InputStream.js';
import NClob from '../../java/sql/NClob.js';
import Reader from '../../java/io/Reader.js';
import Ref from '../../java/sql/Ref.js';
import ResultSetMetaData from '../../java/sql/ResultSetMetaData.js';
import RowId from '../../java/sql/RowId.js';
import SQLType from '../../java/sql/SQLType.js';
import SQLWarning from '../../java/sql/SQLWarning.js';
import SQLXML from '../../java/sql/SQLXML.js';
import Statement from '../../java/sql/Statement.js';
import Time from '../../java/sql/Time.js';
import Timestamp from '../../java/sql/Timestamp.js';
import _Array from '../../java/sql/Array.js';
export default interface ResultSet {
    updateBytes(arg0: number, arg1: Array<number>): void;
    updateBytes(arg0: string, arg1: Array<number>): void;
    getObject(arg0: number): any;
    getObject(arg0: number, arg1: any): any;
    getObject(arg0: string): any;
    getObject(arg0: number, arg1: any): any;
    getObject(arg0: string, arg1: any): any;
    getObject(arg0: string, arg1: any): any;
    getBoolean(arg0: number): boolean;
    getBoolean(arg0: string): boolean;
    getByte(arg0: string): number;
    getByte(arg0: number): number;
    getShort(arg0: string): number;
    getShort(arg0: number): number;
    getInt(arg0: number): number;
    getInt(arg0: string): number;
    getLong(arg0: number): number;
    getLong(arg0: string): number;
    getFloat(arg0: number): number;
    getFloat(arg0: string): number;
    getDouble(arg0: number): number;
    getDouble(arg0: string): number;
    getBytes(arg0: number): Array<number>;
    getBytes(arg0: string): Array<number>;
    last(): boolean;
    next(): boolean;
    first(): boolean;
    close(): void;
    getType(): number;
    getRef(arg0: number): Ref;
    getRef(arg0: string): Ref;
    previous(): boolean;
    getArray(arg0: string): _Array;
    getArray(arg0: number): _Array;
    absolute(arg0: number): boolean;
    getDate(arg0: string): Date;
    getDate(arg0: string, arg1: any): Date;
    getDate(arg0: number, arg1: any): Date;
    getDate(arg0: number): Date;
    getTime(arg0: number): Time;
    getTime(arg0: string): Time;
    getTime(arg0: number, arg1: any): Time;
    getTime(arg0: string, arg1: any): Time;
    getString(arg0: number): string;
    getString(arg0: string): string;
    getURL(arg0: number): any;
    getURL(arg0: string): any;
    isClosed(): boolean;
    updateCharacterStream(arg0: string, arg1: Reader, arg2: number): void;
    updateCharacterStream(arg0: string, arg1: Reader): void;
    updateCharacterStream(arg0: number, arg1: Reader, arg2: number): void;
    updateCharacterStream(arg0: number, arg1: Reader): void;
    updateCharacterStream(arg0: string, arg1: Reader, arg2: number): void;
    updateCharacterStream(arg0: number, arg1: Reader, arg2: number): void;
    getNCharacterStream(arg0: number): Reader;
    getNCharacterStream(arg0: string): Reader;
    updateNCharacterStream(arg0: string, arg1: Reader, arg2: number): void;
    updateNCharacterStream(arg0: number, arg1: Reader, arg2: number): void;
    updateNCharacterStream(arg0: number, arg1: Reader): void;
    updateNCharacterStream(arg0: string, arg1: Reader): void;
    getRow(): number;
    isFirst(): boolean;
    isLast(): boolean;
    clearWarnings(): void;
    getFetchSize(): number;
    setFetchDirection(arg0: number): void;
    setFetchSize(arg0: number): void;
    getWarnings(): SQLWarning;
    getFetchDirection(): number;
    getMetaData(): ResultSetMetaData;
    getHoldability(): number;
    updateBinaryStream(arg0: string, arg1: InputStream, arg2: number): void;
    updateBinaryStream(arg0: string, arg1: InputStream, arg2: number): void;
    updateBinaryStream(arg0: number, arg1: InputStream): void;
    updateBinaryStream(arg0: string, arg1: InputStream): void;
    updateBinaryStream(arg0: number, arg1: InputStream, arg2: number): void;
    updateBinaryStream(arg0: number, arg1: InputStream, arg2: number): void;
    getConcurrency(): number;
    updateTime(arg0: number, arg1: Time): void;
    updateTime(arg0: string, arg1: Time): void;
    updateNull(arg0: number): void;
    updateNull(arg0: string): void;
    getBigDecimal(arg0: number, arg1: number): any;
    getBigDecimal(arg0: number): any;
    getBigDecimal(arg0: string): any;
    getBigDecimal(arg0: string, arg1: number): any;
    updateAsciiStream(arg0: string, arg1: InputStream): void;
    updateAsciiStream(arg0: string, arg1: InputStream, arg2: number): void;
    updateAsciiStream(arg0: string, arg1: InputStream, arg2: number): void;
    updateAsciiStream(arg0: number, arg1: InputStream): void;
    updateAsciiStream(arg0: number, arg1: InputStream, arg2: number): void;
    updateAsciiStream(arg0: number, arg1: InputStream, arg2: number): void;
    updateObject(columnIndex: number, x: any, targetSqlType: SQLType, scaleOrLength: number): void;
    updateObject(columnIndex: number, x: any, targetSqlType: SQLType): void;
    updateObject(columnLabel: string, x: any, targetSqlType: SQLType, scaleOrLength: number): void;
    updateObject(columnLabel: string, x: any, targetSqlType: SQLType): void;
    updateObject(arg0: string, arg1: any): void;
    updateObject(arg0: string, arg1: any, arg2: number): void;
    updateObject(arg0: number, arg1: any): void;
    updateObject(arg0: number, arg1: any, arg2: number): void;
    insertRow(): void;
    getCharacterStream(arg0: string): Reader;
    getCharacterStream(arg0: number): Reader;
    getAsciiStream(arg0: string): InputStream;
    getAsciiStream(arg0: number): InputStream;
    getUnicodeStream(arg0: string): InputStream;
    getUnicodeStream(arg0: number): InputStream;
    getBinaryStream(arg0: string): InputStream;
    getBinaryStream(arg0: number): InputStream;
    beforeFirst(): void;
    updateInt(arg0: number, arg1: number): void;
    updateInt(arg0: string, arg1: number): void;
    updateRow(): void;
    deleteRow(): void;
    refreshRow(): void;
    moveToInsertRow(): void;
    getTimestamp(arg0: string, arg1: any): Timestamp;
    getTimestamp(arg0: number, arg1: any): Timestamp;
    getTimestamp(arg0: number): Timestamp;
    getTimestamp(arg0: string): Timestamp;
    updateDouble(arg0: number, arg1: number): void;
    updateDouble(arg0: string, arg1: number): void;
    getCursorName(): string;
    rowDeleted(): boolean;
    updateBigDecimal(arg0: number, arg1: any): void;
    updateBigDecimal(arg0: string, arg1: any): void;
    updateString(arg0: number, arg1: string): void;
    updateString(arg0: string, arg1: string): void;
    updateDate(arg0: number, arg1: Date): void;
    updateDate(arg0: string, arg1: Date): void;
    cancelRowUpdates(): void;
    moveToCurrentRow(): void;
    getStatement(): Statement;
    rowInserted(): boolean;
    getBlob(arg0: number): Blob;
    getBlob(arg0: string): Blob;
    getClob(arg0: string): Clob;
    getClob(arg0: number): Clob;
    findColumn(arg0: string): number;
    isBeforeFirst(): boolean;
    afterLast(): void;
    relative(arg0: number): boolean;
    updateBoolean(arg0: number, arg1: boolean): void;
    updateBoolean(arg0: string, arg1: boolean): void;
    updateByte(arg0: string, arg1: number): void;
    updateByte(arg0: number, arg1: number): void;
    updateShort(arg0: number, arg1: number): void;
    updateShort(arg0: string, arg1: number): void;
    updateLong(arg0: string, arg1: number): void;
    updateLong(arg0: number, arg1: number): void;
    updateFloat(arg0: string, arg1: number): void;
    updateFloat(arg0: number, arg1: number): void;
    isAfterLast(): boolean;
    wasNull(): boolean;
    rowUpdated(): boolean;
    updateTimestamp(arg0: number, arg1: Timestamp): void;
    updateTimestamp(arg0: string, arg1: Timestamp): void;
    updateClob(arg0: string, arg1: Reader): void;
    updateClob(arg0: number, arg1: Reader, arg2: number): void;
    updateClob(arg0: string, arg1: Reader, arg2: number): void;
    updateClob(arg0: string, arg1: Clob): void;
    updateClob(arg0: number, arg1: Reader): void;
    updateClob(arg0: number, arg1: Clob): void;
    updateNString(arg0: string, arg1: string): void;
    updateNString(arg0: number, arg1: string): void;
    getNClob(arg0: string): NClob;
    getNClob(arg0: number): NClob;
    updateRowId(arg0: number, arg1: RowId): void;
    updateRowId(arg0: string, arg1: RowId): void;
    getSQLXML(arg0: string): SQLXML;
    getSQLXML(arg0: number): SQLXML;
    getNString(arg0: string): string;
    getNString(arg0: number): string;
    updateBlob(arg0: string, arg1: Blob): void;
    updateBlob(arg0: number, arg1: InputStream): void;
    updateBlob(arg0: number, arg1: InputStream, arg2: number): void;
    updateBlob(arg0: number, arg1: Blob): void;
    updateBlob(arg0: string, arg1: InputStream): void;
    updateBlob(arg0: string, arg1: InputStream, arg2: number): void;
    getRowId(arg0: string): RowId;
    getRowId(arg0: number): RowId;
    updateArray(arg0: string, arg1: _Array): void;
    updateArray(arg0: number, arg1: _Array): void;
    updateSQLXML(arg0: string, arg1: SQLXML): void;
    updateSQLXML(arg0: number, arg1: SQLXML): void;
    updateNClob(arg0: string, arg1: Reader): void;
    updateNClob(arg0: number, arg1: Reader, arg2: number): void;
    updateNClob(arg0: string, arg1: NClob): void;
    updateNClob(arg0: number, arg1: NClob): void;
    updateNClob(arg0: string, arg1: Reader, arg2: number): void;
    updateNClob(arg0: number, arg1: Reader): void;
    updateRef(arg0: number, arg1: Ref): void;
    updateRef(arg0: string, arg1: Ref): void;
    unwrap(arg0: any): any;
    isWrapperFor(arg0: any): boolean;
}
export default class ResultSet {
    static get $javaClass(): any;
    static get FETCH_FORWARD(): number;
    static get FETCH_REVERSE(): number;
    static get FETCH_UNKNOWN(): number;
    static get TYPE_FORWARD_ONLY(): number;
    static get TYPE_SCROLL_INSENSITIVE(): number;
    static get TYPE_SCROLL_SENSITIVE(): number;
    static get CONCUR_READ_ONLY(): number;
    static get CONCUR_UPDATABLE(): number;
    static get HOLD_CURSORS_OVER_COMMIT(): number;
    static get CLOSE_CURSORS_AT_COMMIT(): number;
}
