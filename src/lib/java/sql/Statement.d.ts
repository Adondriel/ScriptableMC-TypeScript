import Connection from '../../java/sql/Connection.js';
import ResultSet from '../../java/sql/ResultSet.js';
import SQLWarning from '../../java/sql/SQLWarning.js';
export default interface Statement {
    execute(arg0: string, arg1: number): boolean;
    execute(arg0: string): boolean;
    execute(arg0: string, arg1: Array<number>): boolean;
    execute(arg0: string, arg1: Array<string>): boolean;
    close(): void;
    getConnection(): Connection;
    isClosed(): boolean;
    cancel(): void;
    getResultSetConcurrency(): number;
    getResultSetHoldability(): number;
    isCloseOnCompletion(): boolean;
    setEscapeProcessing(arg0: boolean): void;
    addBatch(arg0: string): void;
    clearBatch(): void;
    getQueryTimeout(): number;
    clearWarnings(): void;
    getFetchSize(): number;
    executeBatch(): Array<number>;
    executeUpdate(arg0: string, arg1: Array<number>): number;
    executeUpdate(arg0: string, arg1: number): number;
    executeUpdate(arg0: string): number;
    executeUpdate(arg0: string, arg1: Array<string>): number;
    setFetchDirection(arg0: number): void;
    getMaxRows(): number;
    getUpdateCount(): number;
    getGeneratedKeys(): ResultSet;
    setMaxRows(arg0: number): void;
    setMaxFieldSize(arg0: number): void;
    setCursorName(arg0: string): void;
    getMoreResults(): boolean;
    getMoreResults(arg0: number): boolean;
    getResultSetType(): number;
    setPoolable(arg0: boolean): void;
    setFetchSize(arg0: number): void;
    setQueryTimeout(arg0: number): void;
    getResultSet(): ResultSet;
    isPoolable(): boolean;
    executeQuery(arg0: string): ResultSet;
    getMaxFieldSize(): number;
    getWarnings(): SQLWarning;
    getFetchDirection(): number;
    enquoteIdentifier(identifier: string, alwaysQuote: boolean): string;
    getLargeMaxRows(): number;
    isSimpleIdentifier(identifier: string): boolean;
    closeOnCompletion(): void;
    enquoteLiteral(val: string): string;
    executeLargeBatch(): Array<number>;
    setLargeMaxRows(max: number): void;
    executeLargeUpdate(sql: string, columnNames: Array<string>): number;
    executeLargeUpdate(sql: string): number;
    executeLargeUpdate(sql: string, columnIndexes: Array<number>): number;
    executeLargeUpdate(sql: string, autoGeneratedKeys: number): number;
    getLargeUpdateCount(): number;
    enquoteNCharLiteral(val: string): string;
    unwrap(arg0: any): any;
    isWrapperFor(arg0: any): boolean;
}
export default class Statement {
    static get $javaClass(): any;
    static get CLOSE_CURRENT_RESULT(): number;
    static get KEEP_CURRENT_RESULT(): number;
    static get CLOSE_ALL_RESULTS(): number;
    static get SUCCESS_NO_INFO(): number;
    static get EXECUTE_FAILED(): number;
    static get RETURN_GENERATED_KEYS(): number;
    static get NO_GENERATED_KEYS(): number;
}
