import { Statement } from '../../java/sql/Statement.js';
import { PreparedStatement } from '../../java/sql/PreparedStatement.js';
import { ShardingKey } from '../../java/sql/ShardingKey.js';
import { SQLWarning } from '../../java/sql/SQLWarning.js';
import { DatabaseMetaData } from '../../java/sql/DatabaseMetaData.js';
import { Clob } from '../../java/sql/Clob.js';
import { Struct } from '../../java/sql/Struct.js';
import { Blob } from '../../java/sql/Blob.js';
import { Savepoint } from '../../java/sql/Savepoint.js';
import { NClob } from '../../java/sql/NClob.js';
import { SQLXML } from '../../java/sql/SQLXML.js';
import { _Array } from '../../java/sql/Array.js';
import { CallableStatement } from '../../java/sql/CallableStatement.js';
export interface Connection {
    setReadOnly(arg0: boolean): void;
    close(): void;
    isReadOnly(): boolean;
    abort(arg0: any): void;
    isValid(arg0: number): boolean;
    createStatement(arg0: number, arg1: number): Statement;
    createStatement(): Statement;
    createStatement(arg0: number, arg1: number, arg2: number): Statement;
    prepareStatement(arg0: string, arg1: number, arg2: number, arg3: number): PreparedStatement;
    prepareStatement(arg0: string): PreparedStatement;
    prepareStatement(arg0: string, arg1: Array<string>): PreparedStatement;
    prepareStatement(arg0: string, arg1: Array<number>): PreparedStatement;
    prepareStatement(arg0: string, arg1: number): PreparedStatement;
    prepareStatement(arg0: string, arg1: number, arg2: number): PreparedStatement;
    isClosed(): boolean;
    setTransactionIsolation(arg0: number): void;
    setShardingKeyIfValid(shardingKey: ShardingKey, superShardingKey: ShardingKey, timeout: number): boolean;
    setShardingKeyIfValid(shardingKey: ShardingKey, timeout: number): boolean;
    getTransactionIsolation(): number;
    getWarnings(): SQLWarning;
    clearWarnings(): void;
    getMetaData(): DatabaseMetaData;
    setSchema(arg0: string): void;
    createClob(): Clob;
    endRequest(): void;
    getTypeMap(): any;
    createStruct(arg0: string, arg1: Array<any>): Struct;
    setHoldability(arg0: number): void;
    getHoldability(): number;
    createBlob(): Blob;
    setNetworkTimeout(arg0: any, arg1: number): void;
    getCatalog(): string;
    getAutoCommit(): boolean;
    nativeSQL(arg0: string): string;
    setSavepoint(arg0: string): Savepoint;
    setSavepoint(): Savepoint;
    getClientInfo(arg0: string): string;
    getClientInfo(): any;
    rollback(): void;
    rollback(arg0: Savepoint): void;
    setClientInfo(arg0: any): void;
    setClientInfo(arg0: string, arg1: string): void;
    releaseSavepoint(arg0: Savepoint): void;
    createNClob(): NClob;
    createSQLXML(): SQLXML;
    setTypeMap(arg0: any): void;
    createArrayOf(arg0: string, arg1: Array<any>): _Array;
    getSchema(): string;
    commit(): void;
    setAutoCommit(arg0: boolean): void;
    beginRequest(): void;
    prepareCall(arg0: string, arg1: number, arg2: number, arg3: number): CallableStatement;
    prepareCall(arg0: string): CallableStatement;
    prepareCall(arg0: string, arg1: number, arg2: number): CallableStatement;
    setShardingKey(shardingKey: ShardingKey, superShardingKey: ShardingKey): void;
    setShardingKey(shardingKey: ShardingKey): void;
    setCatalog(arg0: string): void;
    getNetworkTimeout(): number;
    unwrap(arg0: any): any;
    isWrapperFor(arg0: any): boolean;
}
export declare class Connection {
    static get $javaClass(): any;
    static get TRANSACTION_NONE(): number;
    static get TRANSACTION_READ_UNCOMMITTED(): number;
    static get TRANSACTION_READ_COMMITTED(): number;
    static get TRANSACTION_REPEATABLE_READ(): number;
    static get TRANSACTION_SERIALIZABLE(): number;
}
