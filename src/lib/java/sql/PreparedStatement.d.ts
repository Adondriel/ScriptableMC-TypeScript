import { Timestamp } from '../../java/sql/Timestamp.js';
import { Time } from '../../java/sql/Time.js';
import { _Array } from '../../java/sql/Array.js';
import { Date } from '../../java/sql/Date.js';
import { ParameterMetaData } from '../../java/sql/ParameterMetaData.js';
import { ResultSet } from '../../java/sql/ResultSet.js';
import { RowId } from '../../java/sql/RowId.js';
import { NClob } from '../../java/sql/NClob.js';
import { SQLXML } from '../../java/sql/SQLXML.js';
import { Ref } from '../../java/sql/Ref.js';
import { Blob } from '../../java/sql/Blob.js';
import { SQLType } from '../../java/sql/SQLType.js';
import { Clob } from '../../java/sql/Clob.js';
import { ResultSetMetaData } from '../../java/sql/ResultSetMetaData.js';
import { Connection } from '../../java/sql/Connection.js';
import { SQLWarning } from '../../java/sql/SQLWarning.js';
export interface PreparedStatement {
    execute(): boolean;
    setBoolean(arg0: number, arg1: boolean): void;
    setByte(arg0: number, arg1: number): void;
    setShort(arg0: number, arg1: number): void;
    setInt(arg0: number, arg1: number): void;
    setLong(arg0: number, arg1: number): void;
    setFloat(arg0: number, arg1: number): void;
    setDouble(arg0: number, arg1: number): void;
    setTimestamp(arg0: number, arg1: Timestamp): void;
    setTimestamp(arg0: number, arg1: Timestamp, arg2: any): void;
    setTime(arg0: number, arg1: Time, arg2: any): void;
    setTime(arg0: number, arg1: Time): void;
    setURL(arg0: number, arg1: any): void;
    setArray(arg0: number, arg1: _Array): void;
    setDate(arg0: number, arg1: Date): void;
    setDate(arg0: number, arg1: Date, arg2: any): void;
    getParameterMetaData(): ParameterMetaData;
    setNCharacterStream(arg0: number, arg1: any): void;
    setNCharacterStream(arg0: number, arg1: any, arg2: number): void;
    executeQuery(): ResultSet;
    executeUpdate(): number;
    setRowId(arg0: number, arg1: RowId): void;
    setNString(arg0: number, arg1: string): void;
    setNClob(arg0: number, arg1: any, arg2: number): void;
    setNClob(arg0: number, arg1: any): void;
    setNClob(arg0: number, arg1: NClob): void;
    setSQLXML(arg0: number, arg1: SQLXML): void;
    executeLargeUpdate(): number;
    clearParameters(): void;
    setRef(arg0: number, arg1: Ref): void;
    setAsciiStream(arg0: number, arg1: any): void;
    setAsciiStream(arg0: number, arg1: any, arg2: number): void;
    setAsciiStream(arg0: number, arg1: any, arg2: number): void;
    setUnicodeStream(arg0: number, arg1: any, arg2: number): void;
    addBatch(): void;
    setBigDecimal(arg0: number, arg1: any): void;
    setString(arg0: number, arg1: string): void;
    setBinaryStream(arg0: number, arg1: any, arg2: number): void;
    setBinaryStream(arg0: number, arg1: any): void;
    setBinaryStream(arg0: number, arg1: any, arg2: number): void;
    setCharacterStream(arg0: number, arg1: any, arg2: number): void;
    setCharacterStream(arg0: number, arg1: any): void;
    setCharacterStream(arg0: number, arg1: any, arg2: number): void;
    setBlob(arg0: number, arg1: any): void;
    setBlob(arg0: number, arg1: any, arg2: number): void;
    setBlob(arg0: number, arg1: Blob): void;
    setNull(arg0: number, arg1: number, arg2: string): void;
    setNull(arg0: number, arg1: number): void;
    setBytes(arg0: number, arg1: Array<number>): void;
    setObject(arg0: number, arg1: any): void;
    setObject(arg0: number, arg1: any, arg2: number, arg3: number): void;
    setObject(arg0: number, arg1: any, arg2: number): void;
    setObject(parameterIndex: number, x: any, targetSqlType: SQLType): void;
    setObject(parameterIndex: number, x: any, targetSqlType: SQLType, scaleOrLength: number): void;
    setClob(arg0: number, arg1: any, arg2: number): void;
    setClob(arg0: number, arg1: Clob): void;
    setClob(arg0: number, arg1: any): void;
    getMetaData(): ResultSetMetaData;
    execute(arg0: string, arg1: number): boolean;
    execute(arg0: string): boolean;
    execute(arg0: string, arg1: Array<string>): boolean;
    execute(arg0: string, arg1: Array<number>): boolean;
    close(): void;
    getResultSetConcurrency(): number;
    isClosed(): boolean;
    getConnection(): Connection;
    cancel(): void;
    setEscapeProcessing(arg0: boolean): void;
    getLargeUpdateCount(): number;
    isCloseOnCompletion(): boolean;
    enquoteNCharLiteral(val: string): string;
    getResultSetHoldability(): number;
    getQueryTimeout(): number;
    setCursorName(arg0: string): void;
    getUpdateCount(): number;
    getResultSet(): ResultSet;
    getMoreResults(arg0: number): boolean;
    getMoreResults(): boolean;
    executeQuery(arg0: string): ResultSet;
    executeUpdate(arg0: string, arg1: Array<string>): number;
    executeUpdate(arg0: string, arg1: Array<number>): number;
    executeUpdate(arg0: string): number;
    executeUpdate(arg0: string, arg1: number): number;
    setMaxFieldSize(arg0: number): void;
    getMaxFieldSize(): number;
    getMaxRows(): number;
    setQueryTimeout(arg0: number): void;
    setMaxRows(arg0: number): void;
    getWarnings(): SQLWarning;
    clearWarnings(): void;
    executeLargeBatch(): Array<number>;
    getLargeMaxRows(): number;
    setFetchSize(arg0: number): void;
    executeLargeUpdate(sql: string, columnNames: Array<string>): number;
    executeLargeUpdate(sql: string, columnIndexes: Array<number>): number;
    executeLargeUpdate(sql: string, autoGeneratedKeys: number): number;
    executeLargeUpdate(sql: string): number;
    getFetchSize(): number;
    isSimpleIdentifier(identifier: string): boolean;
    isPoolable(): boolean;
    clearBatch(): void;
    addBatch(arg0: string): void;
    enquoteIdentifier(identifier: string, alwaysQuote: boolean): string;
    enquoteLiteral(val: string): string;
    setLargeMaxRows(max: number): void;
    closeOnCompletion(): void;
    getGeneratedKeys(): ResultSet;
    setPoolable(arg0: boolean): void;
    executeBatch(): Array<number>;
    getFetchDirection(): number;
    getResultSetType(): number;
    setFetchDirection(arg0: number): void;
    unwrap(arg0: any): any;
    isWrapperFor(arg0: any): boolean;
}
export declare class PreparedStatement {
    static get $javaClass(): any;
    static get CLOSE_CURRENT_RESULT(): number;
    static get KEEP_CURRENT_RESULT(): number;
    static get CLOSE_ALL_RESULTS(): number;
    static get SUCCESS_NO_INFO(): number;
    static get EXECUTE_FAILED(): number;
    static get RETURN_GENERATED_KEYS(): number;
    static get NO_GENERATED_KEYS(): number;
}
